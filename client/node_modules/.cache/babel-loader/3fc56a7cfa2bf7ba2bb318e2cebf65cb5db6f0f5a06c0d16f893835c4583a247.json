{"ast":null,"code":"var _jsxFileName = \"/home/bharaths0218/account/client/src/pages/VerifyEmail.js\",\n  _s = $RefreshSig$();\n// client/src/pages/VerifyEmail.js\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VerifyEmail = () => {\n  _s();\n  const {\n    token\n  } = useParams();\n  const [message, setMessage] = useState('Verifying your email...');\n  const [isSuccess, setIsSuccess] = useState(false);\n  useEffect(() => {\n    // This function will be called when the component first loads.\n    const verifyUserEmail = async () => {\n      try {\n        // We make a GET request to our backend's verification endpoint.\n        const res = await axios.get(`http://localhost:8000/api/auth/verify/${token}`);\n\n        // If the request is successful, update the message and set success to true.\n        setMessage(res.data);\n        setIsSuccess(true);\n      } catch (err) {\n        var _err$response;\n        // If there's an error, update the message and set success to false.\n        setMessage(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : _err$response.data) || 'Verification failed. The link might be invalid or expired.');\n        setIsSuccess(false);\n      }\n    };\n\n    // Only run the verification function if a token exists.\n    if (token) {\n      verifyUserEmail();\n    }\n  }, [token]); // The `[token]` dependency array makes sure this effect re-runs if the token changes.\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Email Verification\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: isSuccess ? 'green' : 'red',\n        fontWeight: 'bold'\n      },\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n_s(VerifyEmail, \"rD4rZZWr19KIDTa0vj4yotaLxew=\", false, function () {\n  return [useParams];\n});\n_c = VerifyEmail;\nexport default VerifyEmail;\nvar _c;\n$RefreshReg$(_c, \"VerifyEmail\");","map":{"version":3,"names":["React","useEffect","useState","useParams","axios","jsxDEV","_jsxDEV","VerifyEmail","_s","token","message","setMessage","isSuccess","setIsSuccess","verifyUserEmail","res","get","data","err","_err$response","response","children","fileName","_jsxFileName","lineNumber","columnNumber","style","color","fontWeight","_c","$RefreshReg$"],"sources":["/home/bharaths0218/account/client/src/pages/VerifyEmail.js"],"sourcesContent":["// client/src/pages/VerifyEmail.js\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport axios from 'axios';\n\nconst VerifyEmail = () => {\n  const { token } = useParams();\n  \n  const [message, setMessage] = useState('Verifying your email...');\n  const [isSuccess, setIsSuccess] = useState(false);\n\n  useEffect(() => {\n    // This function will be called when the component first loads.\n    const verifyUserEmail = async () => {\n      try {\n        // We make a GET request to our backend's verification endpoint.\n        const res = await axios.get(`http://localhost:8000/api/auth/verify/${token}`);\n        \n        // If the request is successful, update the message and set success to true.\n        setMessage(res.data);\n        setIsSuccess(true);\n      } catch (err) {\n        // If there's an error, update the message and set success to false.\n        setMessage(err.response?.data || 'Verification failed. The link might be invalid or expired.');\n        setIsSuccess(false);\n      }\n    };\n\n    // Only run the verification function if a token exists.\n    if (token) {\n      verifyUserEmail();\n    }\n  }, [token]); // The `[token]` dependency array makes sure this effect re-runs if the token changes.\n\n  return (\n    <div>\n      <h2>Email Verification</h2>\n      {/* Conditionally style the message based on success or failure */}\n      <p style={{ color: isSuccess ? 'green' : 'red', fontWeight: 'bold' }}>{message}</p>\n    </div>\n  );\n};\n\nexport default VerifyEmail;"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAM;IAAEC;EAAM,CAAC,GAAGN,SAAS,CAAC,CAAC;EAE7B,MAAM,CAACO,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,yBAAyB,CAAC;EACjE,MAAM,CAACU,SAAS,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EAEjDD,SAAS,CAAC,MAAM;IACd;IACA,MAAMa,eAAe,GAAG,MAAAA,CAAA,KAAY;MAClC,IAAI;QACF;QACA,MAAMC,GAAG,GAAG,MAAMX,KAAK,CAACY,GAAG,CAAC,yCAAyCP,KAAK,EAAE,CAAC;;QAE7E;QACAE,UAAU,CAACI,GAAG,CAACE,IAAI,CAAC;QACpBJ,YAAY,CAAC,IAAI,CAAC;MACpB,CAAC,CAAC,OAAOK,GAAG,EAAE;QAAA,IAAAC,aAAA;QACZ;QACAR,UAAU,CAAC,EAAAQ,aAAA,GAAAD,GAAG,CAACE,QAAQ,cAAAD,aAAA,uBAAZA,aAAA,CAAcF,IAAI,KAAI,4DAA4D,CAAC;QAC9FJ,YAAY,CAAC,KAAK,CAAC;MACrB;IACF,CAAC;;IAED;IACA,IAAIJ,KAAK,EAAE;MACTK,eAAe,CAAC,CAAC;IACnB;EACF,CAAC,EAAE,CAACL,KAAK,CAAC,CAAC,CAAC,CAAC;;EAEb,oBACEH,OAAA;IAAAe,QAAA,gBACEf,OAAA;MAAAe,QAAA,EAAI;IAAkB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAE3BnB,OAAA;MAAGoB,KAAK,EAAE;QAAEC,KAAK,EAAEf,SAAS,GAAG,OAAO,GAAG,KAAK;QAAEgB,UAAU,EAAE;MAAO,CAAE;MAAAP,QAAA,EAAEX;IAAO;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAChF,CAAC;AAEV,CAAC;AAACjB,EAAA,CApCID,WAAW;EAAA,QACGJ,SAAS;AAAA;AAAA0B,EAAA,GADvBtB,WAAW;AAsCjB,eAAeA,WAAW;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}